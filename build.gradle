import com.amazonaws.auth.policy.Policy
import com.amazonaws.auth.policy.Principal
import com.amazonaws.auth.policy.Statement
import com.amazonaws.auth.policy.actions.S3Actions
import com.amazonaws.auth.policy.resources.S3BucketResource
import com.amazonaws.auth.policy.resources.S3ObjectResource
import com.amazonaws.services.s3.model.ObjectMetadata

import jp.classmethod.aws.gradle.s3.SyncTask

// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
		mavenCentral()
		maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
	    classpath "jp.classmethod.aws:gradle-aws-plugin:0.+"
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

repositories {
        jcenter()
        maven { url "https://jitpack.io" }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: "jp.classmethod.aws.s3"

aws {
	profileName = "minecraft"
	region = "us-east-1"
}

def myBucketName = 'broad-participation'

version = "1.12.2.1"
group= "com.dyn" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "Schematics"

sourceCompatibility = 1.8
targetCompatibility = 1.8

minecraft {
    version = "1.12.2-14.23.0.2493"
    runDir = "run"
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20170624"
    makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

dependencies {
//	compile 'com.github.CityOfLearning:rabbit-gui:DYN-CityServer-SNAPSHOT'
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

reobfJar.doLast {
    ant.checksum file: tasks.jar.archivePath
}

build.doLast {
	File jarFile = file('./build/libs/' + archivesBaseName + '-' + version +".jar")
	File md5File = file('./build/libs/' + archivesBaseName + '-' + version +".jar.MD5")
	jarFile.renameTo(file('./build/libs/' + archivesBaseName+".jar"))
	md5File.renameTo(file('./build/libs/' + archivesBaseName+".MD5"))
}

task publish(type: SyncTask, dependsOn: build) {
	source file('./build/libs/') //must be a directory
	bucketName myBucketName
	
	metadataProvider { bucket, key, file ->
	
		ObjectMetadata m = new ObjectMetadata()
		m.setCacheControl("no-cache, no-store")
		return m
	}
	
	setAcl 'PublicRead'
}
